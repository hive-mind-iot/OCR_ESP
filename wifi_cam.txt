#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/event_groups.h"
#include "esp_system.h"
#include "esp_wifi.h"
#include "esp_event.h"
#include "esp_log.h"
#include "nvs_flash.h"
#include "esp_http_client.h"
#include "camera_manager.h"

#define MAX_AP_COUNT 20
#define WIFI_CONNECTED_BIT BIT0
#define WIFI_FAIL_BIT BIT1

static const char *TAG = "wifi_scanner";
static EventGroupHandle_t s_wifi_event_group;
static int s_retry_count = 0;
static int s_retry_max = 5;

// WiFi credentials - replace with your target network details
static const char *WIFI_SSID = "neoinfo2";
static const char *WIFI_PASSWORD = "YourPassword";

// HTTP request URL
#define HTTP_SERVER_URL "http://10.42.0.113:5000/upload"

static void event_handler(void *arg, esp_event_base_t event_base,
                          int32_t event_id, void *event_data)
{
    if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_START)
    {
        esp_wifi_connect();
    }
    else if (event_base == WIFI_EVENT && event_id == WIFI_EVENT_STA_DISCONNECTED)
    {
        wifi_event_sta_disconnected_t *event = (wifi_event_sta_disconnected_t *)event_data;

        // Print the reason for disconnection
        switch (event->reason)
        {
        case WIFI_REASON_AUTH_EXPIRE:
            ESP_LOGI(TAG, "Disconnection reason: Authentication expired");
            break;
        case WIFI_REASON_AUTH_FAIL:
            ESP_LOGI(TAG, "Disconnection reason: Authentication failed");
            break;
        case WIFI_REASON_NO_AP_FOUND:
            ESP_LOGI(TAG, "Disconnection reason: AP not found");
            break;
        case WIFI_REASON_ASSOC_FAIL:
            ESP_LOGI(TAG, "Disconnection reason: Association failed");
            break;
        case WIFI_REASON_HANDSHAKE_TIMEOUT:
            ESP_LOGI(TAG, "Disconnection reason: Handshake timeout");
            break;
        default:
            ESP_LOGI(TAG, "Disconnection reason: %d", event->reason);
            break;
        }

        if (s_retry_count < s_retry_max)
        {
            esp_wifi_connect();
            s_retry_count++;
            ESP_LOGI(TAG, "Retrying connection (%d/%d)", s_retry_count, s_retry_max);
        }
        else
        {
            xEventGroupSetBits(s_wifi_event_group, WIFI_FAIL_BIT);
            ESP_LOGI(TAG, "Connection failed after maximum retries");
        }
    }
    else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP)
    {
        ip_event_got_ip_t *event = (ip_event_got_ip_t *)event_data;
        ESP_LOGI(TAG, "Connected with IP Address:" IPSTR, IP2STR(&event->ip_info.ip));
        s_retry_count = 0;
        xEventGroupSetBits(s_wifi_event_group, WIFI_CONNECTED_BIT);
    }
}

static void scan_wifi_networks(void)
{
    ESP_LOGI(TAG, "Starting WiFi scan...");

    uint16_t ap_count = MAX_AP_COUNT;
    wifi_ap_record_t ap_records[MAX_AP_COUNT];
    memset(ap_records, 0, sizeof(ap_records));

    ESP_ERROR_CHECK(esp_wifi_scan_start(NULL, true));
    ESP_ERROR_CHECK(esp_wifi_scan_get_ap_records(&ap_count, ap_records));

    ESP_LOGI(TAG, "Found %d access points:", ap_count);

    bool target_ap_found = false;

    for (int i = 0; i < ap_count; i++)
    {
        ESP_LOGI(TAG, "%d: SSID: %s, RSSI: %d, Channel: %d",
                 i + 1, ap_records[i].ssid, ap_records[i].rssi, ap_records[i].primary);

        if (strcmp((char *)ap_records[i].ssid, WIFI_SSID) == 0)
        {
            target_ap_found = true;
            ESP_LOGI(TAG, "Target network '%s' found!", WIFI_SSID);
        }
    }

    if (!target_ap_found)
    {
        ESP_LOGW(TAG, "Target network '%s' not found in scan results", WIFI_SSID);
    }
}

esp_err_t _http_event_handler(esp_http_client_event_t *evt)
{
    switch (evt->event_id)
    {
    case HTTP_EVENT_ERROR:
        ESP_LOGI(TAG, "HTTP_EVENT_ERROR");
        break;
    case HTTP_EVENT_ON_CONNECTED:
        ESP_LOGI(TAG, "HTTP_EVENT_ON_CONNECTED");
        break;
    case HTTP_EVENT_HEADER_SENT:
        ESP_LOGI(TAG, "HTTP_EVENT_HEADER_SENT");
        break;
    case HTTP_EVENT_ON_HEADER:
        ESP_LOGI(TAG, "HTTP_EVENT_ON_HEADER, key=%s, value=%s", evt->header_key, evt->header_value);
        break;
    case HTTP_EVENT_ON_DATA:
        ESP_LOGI(TAG, "HTTP_EVENT_ON_DATA, len=%d", evt->data_len);
        if (evt->data_len)
        {
            // Print the first 100 bytes of the response or less
            int print_len = evt->data_len > 100 ? 100 : evt->data_len;
            ESP_LOGI(TAG, "HTTP Response (first %d bytes): %.*s", print_len, print_len, (char *)evt->data);
        }
        break;
    case HTTP_EVENT_ON_FINISH:
        ESP_LOGI(TAG, "HTTP_EVENT_ON_FINISH");
        break;
    case HTTP_EVENT_DISCONNECTED:
        ESP_LOGI(TAG, "HTTP_EVENT_DISCONNECTED");
        break;
    default:
        ESP_LOGI(TAG, "HTTP_EVENT_UNKNOWN");
        break;
    }
    return ESP_OK;
}

static void http_request_task(void *pvParameters)
{
    ESP_LOGI(TAG, "Starting HTTP request to %s", HTTP_SERVER_URL);

    while (1)
    {
        camera_fb_t *fb = camera_get_frame();
        if (!fb)
        {
            ESP_LOGE(TAG, "Camera capture failed");
            vTaskDelay(1000 / portTICK_PERIOD_MS);
            continue;
        }
        ESP_LOGI(TAG, "Captured frame size: %zu", fb->len);

        esp_http_client_config_t config = {
            .url = HTTP_SERVER_URL,
            .event_handler = _http_event_handler,
            .method = HTTP_METHOD_POST,
        };

        esp_http_client_handle_t client = esp_http_client_init(&config);

        // Set headers
        esp_http_client_set_header(client, "Content-Type", "image/jpeg");

        // Set post data
        esp_http_client_set_post_field(client, (const char *)fb->buf, fb->len);

        // Perform the HTTP POST request
        ESP_LOGI(TAG, "Uploading image to server...");
        esp_err_t err = esp_http_client_perform(client);

        if (err == ESP_OK)
        {
            int status_code = esp_http_client_get_status_code(client);
            ESP_LOGI(TAG, "HTTP POST Status = %d", status_code);
            if (status_code == 200)
            {
                ESP_LOGI(TAG, "Image uploaded successfully");
            }
            else
            {
                ESP_LOGE(TAG, "Server error, status code: %d", status_code);
            }
        }
        else
        {
            ESP_LOGE(TAG, "HTTP POST request failed: %s", esp_err_to_name(err));
        }

        esp_http_client_cleanup(client);
        esp_camera_fb_return(fb);

        vTaskDelay(4000 / portTICK_PERIOD_MS);
    }
}

void app_main(void)
{
    // Initialize NVS
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)
    {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    ESP_LOGI(TAG, "ESP WiFi scanner and HTTP client");

    // Initialize TCP/IP adapter
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();

    // Initialize WiFi
    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&cfg));

    // Register event handler
    s_wifi_event_group = xEventGroupCreate();
    ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL));

    // Set WiFi mode
    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_start());

    // Scan for available networks
    scan_wifi_networks();

    // Configure WiFi station with target network credentials
    wifi_config_t wifi_config = {
        .sta = {
            // .pmf_cfg = {
            //     .capable = true,
            //     .required = false
            // },
            .threshold.authmode = WIFI_AUTH_OPEN,
        },
    };
    strcpy((char *)wifi_config.sta.ssid, WIFI_SSID);
    // strcpy((char *)wifi_config.sta.password, WIFI_PASSWORD);

    ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_connect());

    ESP_LOGI(TAG, "Connecting to %s...", WIFI_SSID);

    // Wait for the connection event
    EventBits_t bits = xEventGroupWaitBits(s_wifi_event_group,
                                           WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,
                                           pdFALSE,
                                           pdFALSE,
                                           portMAX_DELAY);

    if (bits & WIFI_CONNECTED_BIT)
    {
        ESP_LOGI(TAG, "Connected to %s", WIFI_SSID);

        // Create a task to perform HTTP request
        xTaskCreate(&http_request_task, "http_request_task", 8192, NULL, 5, NULL);
    }
    else if (bits & WIFI_FAIL_BIT)
    {
        ESP_LOGE(TAG, "Failed to connect to %s", WIFI_SSID);
    }
    else
    {
        ESP_LOGE(TAG, "Unexpected event");
    }
}